/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import common.ConvertJSON;

import common.Request;
import common.Response;
import common.RetractableBollard;
import common_aqs_client.CommunicationWithServer;
import connection.PropertiesFileReader;

import client.Crud;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JLabel;
import javax.swing.JToggleButton;
import javax.swing.JTextField;
import javax.swing.JTable;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

/**
 *
 * @author ANAS
 */
public class Crud extends javax.swing.JFrame {

    /**
     * Creates new form Crud
     */
	/*private Logger LOGGER;
	@SuppressWarnings("unused")
	private PropertiesFileReader serveconfig;
	 final int SERVER_PORT;
	 final String SERVER_ADDRESS;
	private ClientCommunication client;*/
    
    ArrayList<RetractableBollard> bollardinfo = new ArrayList<>();
    CommunicationWithServer client = new CommunicationWithServer();
    PropertiesFileReader serveconfig = new PropertiesFileReader();
	

    public Crud() throws IOException  {
        initComponents();
       
        
        
        lOGGER = Logger.getLogger(Crud.class.getName());
		
		serveconfig.initServer();
		
		
		
		
		final int SERVER_PORT = Integer.parseInt(serveconfig.getProperty("serverportClient"));
		final String SERVER_ADDRESS = serveconfig.getProperty("serveraddress");
		
		
		
			
        
		
		fetch(client);
		
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	
    	
		
		
    	

        txtId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtisActive = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBollard = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bollard");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel1.setText("Id");

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel2.setText("Address");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel3.setText("isActive");
        
        jLabel3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel3.setText("state");
        
        jLabel4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel4.setText("way");

        tblBollard.setModel(new DefaultTableModel(
        	new Object[][] {
        	},
        	new String[] {
        		"Id", "Address", "isActive", "state", "way"
        	}
        ) {
        	Class[] columnTypes = new Class[] {
        		Integer.class, String.class, Boolean.class, Boolean.class, Boolean.class
        	};
        	public Class getColumnClass(int columnIndex) {
        		return columnTypes[columnIndex];
        	}
        });
        tblBollard.setCellSelectionEnabled(true);
        tblBollard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStudentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBollard);
        if (tblBollard.getColumnModel().getColumnCount() > 0) {
            tblBollard.getColumnModel().getColumn(2).setResizable(false);
        }

        btnSave.setText("Save");
        btnSave.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSave.setIconTextGap(0);
        btnSave.setInheritsPopupMenu(true);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
              
					try {
						btnSaveActionPerformed(evt);
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				
					// TODO Auto-generated catch block
					
				
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					btnUpdateActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        btnDelete1.setText("Delete");
        btnDelete1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Bollard Settings");
        
        Jlabel4 = new JLabel("State");
        
        txtState = new JTextField();
        txtState.setColumns(10);
        
        JLabel jLabel5 = new JLabel("Way");
        jLabel5.setFont(new Font("Tahoma", Font.PLAIN, 13));
        
        txtWay = new JTextField();
        txtWay.setColumns(10);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addGap(34)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addGroup(layout.createSequentialGroup()
        									.addGroup(layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE)
        										.addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE))
        									.addGap(18)
        									.addGroup(layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(txtAddress)
        										.addComponent(txtId)))
        								.addGroup(layout.createSequentialGroup()
        									.addGroup(layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
        										.addComponent(Jlabel4, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
        										.addComponent(jLabel5))
        									.addPreferredGap(ComponentPlacement.RELATED)
        									.addGroup(layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(txtWay)
        										.addComponent(txtisActive, GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
        										.addComponent(txtState, GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)))))
        						.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        							.addContainerGap(108, Short.MAX_VALUE)
        							.addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 72, GroupLayout.PREFERRED_SIZE)))
        					.addGap(18)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jScrollPane1, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 376, GroupLayout.PREFERRED_SIZE)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(btnUpdate, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
        							.addGap(18)
        							.addComponent(btnDelete1, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(282)
        					.addComponent(jLabel4)))
        			.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(10)
        			.addComponent(jLabel4, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(19)
        					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(18)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtId, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtAddress, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtisActive, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE))
        					.addGap(6)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addGap(7)
        							.addComponent(txtState, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        								.addComponent(jLabel5)
        								.addComponent(txtWay, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)))
        						.addComponent(Jlabel4, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))))
        			.addGap(46)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnUpdate, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnDelete1, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(73, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        Integer id = Integer.parseInt(txtId.getText()); //txtId.getText().trim();
        String Address = txtAddress.getText().trim();
        Boolean isActive = Boolean.parseBoolean(txtisActive.getText()); 
        Boolean state = Boolean.parseBoolean(txtState.getText());
        Boolean way = Boolean.parseBoolean(txtWay.getText());
        
        
        if ( !Address.isEmpty() && !isActive.toString().isEmpty() && !state.toString().isEmpty() && !way.toString().isEmpty()  && !id.toString(id).isEmpty() ) {
            try {
            	CommunicationWithServer client = new CommunicationWithServer();
            	final int SERVER_PORT = Integer.parseInt(serveconfig.getProperty("serverportClient"));
        		final String SERVER_ADDRESS = serveconfig.getProperty("serveraddress");
           		
           	
        		ConvertJSON converter = new ConvertJSON();
            	
            	
            	Request req = new Request();
        		RetractableBollard bollard = new RetractableBollard();
        		/*bollard.setId(id);
        		bollard.setAddress(Address);
        		bollard.setActive(isActive);
        		bollard.setState(state);
        		bollard.setWay(way);*/
        		req.setSource("client");			
        		req.setOperation_type("selectID");
        		req.setTarget("retractablebollard");
        		req.setObj(id.toString());
        		
        		
        		client.startConnection(SERVER_ADDRESS, SERVER_PORT);
        		
        		Response resp= new Response();
        		
        			
        		resp = client.sendMessage(req);
        		ArrayList<String> info = resp.getValues();
        		
            	
            	
            	
               
                if (info.isEmpty()) {
                	
                	System.out.println("anas");
                    saveUser(id, Address, isActive, state, way, client);
                    DefaultTableModel model = (DefaultTableModel) tblBollard.getModel();
                    Object[] row = new Object[5];
                    row[0] = id;
                    row[1] = Address;
                    row[2] = isActive;
                    row[3] = state;
                    row[4] = way;
                    model.addRow(row);
                } else {
                    alert("Please provide a different id number", "Similar id found");
                }

                clear();
            } catch (Exception ex) {
                Logger.getLogger(Crud.class.getName()).log(Level.SEVERE, null, ex);
            }finally {
            }
            
        }  //      else if (!id.matches("^[0-9]{8}$")) {
            //       alert("please provide a valid id number", "Wrong id");
          //      } 
        else {
          alert("please fill in all the details");}
        }
        
    //GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
    	  Integer id = Integer.parseInt(txtId.getText());
          String Address = txtAddress.getText().trim();
          Boolean isActive = Boolean.parseBoolean(txtisActive.getText()); 
          Boolean state = Boolean.parseBoolean(txtState.getText());
          Boolean way = Boolean.parseBoolean(txtWay.getText());
          
          if ( !Address.isEmpty() && !isActive.toString().isEmpty() && !state.toString().isEmpty() && !way.toString().isEmpty()  && !id.toString(id).isEmpty() ) {
              try {
            	  CommunicationWithServer client = new CommunicationWithServer();
              	final int SERVER_PORT = Integer.parseInt(serveconfig.getProperty("serverportClient"));
          		final String SERVER_ADDRESS = serveconfig.getProperty("serveraddress");
             		
             	
             		
             		
             		
          		ConvertJSON converter = new ConvertJSON();
              	
              	
              	Request req = new Request();
          		RetractableBollard bollard = new RetractableBollard();
          		/*bollard.setId(id);
          		bollard.setAddress(Address);
          		bollard.setActive(isActive);
          		bollard.setState(state);
          		bollard.setWay(way);*/
          		req.setSource("client");			
          		req.setOperation_type("selectID");
          		req.setTarget("retractablebollard");
          		req.setObj(id.toString());
          		
          		
          		client.startConnection(SERVER_ADDRESS, SERVER_PORT);
          		
          		Response resp= new Response();
          		
          			
          		resp = client.sendMessage(req);
          		ArrayList<String> info = resp.getValues();
                if (!info.isEmpty() ) {
                	
                	
                    update(id, Address , isActive, state, way, client);
                    
                    
                    DefaultTableModel model = (DefaultTableModel) tblBollard.getModel();
                    model.setRowCount(0);                   
                    fetch(client);
                    alert("Update was successful");
                    
                } else {
                    alert("There is no such student", "Update error");
                    clear();
                }

            } catch (Exception ex) {
                Logger.getLogger(Crud.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            alert("There is nothing to update :(","No row selected");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    //set the values of a row to the textfields
    private void tblStudentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStudentsMouseClicked
        // TODO add your handling code here:
        int i = tblBollard.getSelectedRow();
        TableModel model = tblBollard.getModel();
        txtId.setText(model.getValueAt(i, 0).toString());
        txtAddress.setText(model.getValueAt(i, 1).toString());
        txtisActive.setText(model.getValueAt(i, 2).toString());
        txtState.setText(model.getValueAt(i, 3).toString());
        txtWay.setText(model.getValueAt(i, 4).toString());
    }//GEN-LAST:event_tblStudentsMouseClicked

    //handles delete button action
   private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_btnDelete1ActionPerformed
        // TODO add your handling code here:
        int i = tblBollard.getSelectedRow();
        if (i >= 0) {
            int option = JOptionPane.showConfirmDialog(rootPane,
                    "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
            if (option == 0) {
                TableModel model = tblBollard.getModel();

                String id = model.getValueAt(i, 2).toString();
                if (tblBollard.getSelectedRows().length == 1) {
                    delete(id);
                    DefaultTableModel model1 = (DefaultTableModel) tblBollard.getModel();
                    model1.setRowCount(0);
                    fetch(client);
                    clear();
                }
            }
        } else {
            alert("Please select a row to delete");
        }
    }//GEN-LAST:event_btnDelete1ActionPerformed

    //method to show an info alert
    public void alert(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    //method to show an error alert
    public void alert(String msg, String title) {
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }

    //method to save user to the db
    public void saveUser(Integer id,String Address, Boolean isActive,Boolean state, Boolean way,CommunicationWithServer client ) throws IOException {
       
    	final int SERVER_PORT = Integer.parseInt(serveconfig.getProperty("serverportClient"));
		final String SERVER_ADDRESS = serveconfig.getProperty("serveraddress");RetractableBollard bollard = new RetractableBollard();
		Request req = new Request();
		ConvertJSON converter = new ConvertJSON();
		bollard.setId(id);
		bollard.setAddress(Address);
		bollard.setActive(isActive);
		bollard.setWay(way);
		bollard.setState(state);
		req.setOperation_type("insert");
		req.setTarget("retractablebollard");
		req.setSource("");
		req.setObj(converter.BollardToJson(bollard));
		
		client.startConnection(SERVER_ADDRESS, SERVER_PORT);

		client.sendMessage(req);
		client.stopConnection();
		System.out.println("ok");
    }

    //update the db
    public void update(Integer id, String Address, Boolean isActive,Boolean state, Boolean way,CommunicationWithServer client) throws IOException {
        try {
        	
        	final int SERVER_PORT = Integer.parseInt(serveconfig.getProperty("serverportClient"));
    		final String SERVER_ADDRESS = serveconfig.getProperty("serveraddress");
    		RetractableBollard bollard = new RetractableBollard();
    		Request req = new Request();
    		ConvertJSON converter = new ConvertJSON();
        	
			bollard.setId(id);
        	bollard.setAddress(Address);
        	bollard.setActive(isActive);
        	
        	bollard.setState(state);
        	bollard.setWay(way);
        	req.setOperation_type("update");
    		req.setTarget("retractablebollard");
    		req.setSource("client");
    		req.setObj(converter.BollardToJson(bollard));
    		
    		client.startConnection(SERVER_ADDRESS, SERVER_PORT);

    		client.sendMessage(req);
    		
    		
            
        	
        	
        	
        	
        	
        	
        } catch (Exception ex) {
            Logger.getLogger(Crud.class.getName()).log(Level.SEVERE, null, ex);
        }
       fetch(client);
       client.stopConnection();
    }

    //delete details in the db
    public void delete(String id) throws IOException {
        try {
        	
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/user", "root", "");
            String sql = "DELETE FROM `student` WHERE id_number='" + id + "'";
            st = con.createStatement();
            st.execute(sql);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Crud.class.getName()).log(Level.SEVERE, null, ex);
        }
       fetch( client);
    }

    //method to clear the txt fields
    private void clear() {
        txtId.setText("");
        txtAddress.setText("");
        txtisActive.setText("");
        txtState.setText("");
        txtWay.setText("");
    }

    //fetch 
       private void fetch( CommunicationWithServer client) throws IOException  {
    	   
           
          
   		PropertiesFileReader serveconfig = new PropertiesFileReader();
   		serveconfig.initServer();
   		
   		

		
		
		
		
		final int SERVER_PORT = Integer.parseInt(serveconfig.getProperty("serverportClient"));
		final String SERVER_ADDRESS = serveconfig.getProperty("serveraddress");
   		
   	
   		
   		
   		
    	
    	
    	bollardinfo.clear();
    	Request req = new Request();
		
		ConvertJSON converter = new ConvertJSON();
		req.setSource("client");			
		req.setOperation_type("select");
		req.setTarget("retractablebollard");
		
		
		client.startConnection(SERVER_ADDRESS, SERVER_PORT);
		
		
		
		
		Response resp= new Response();
		try {
			
			resp = client.sendMessage(req);
			client.stopConnection();
			ArrayList<String> databollard = resp.getValues();
			ArrayList<RetractableBollard> data = new ArrayList<RetractableBollard>();
			
			for (int i = 0; i < databollard.size(); i++) {
				data.add(converter.JsonToBollard(databollard.get(i)));
				
				
			}
			
			
			
			
			System.out.println("ok");
			
			
			
		
				
			DefaultTableModel model = (DefaultTableModel) tblBollard.getModel();
			for (int i =0 ; i< data.size();i++ ) {
				
			
			
				 Object[] row = new Object[5];
		            row[0] = data.get(i).getId();
		            row[1] = data.get(i).getAddress();
		            row[2] = data.get(i).isActive();
		            row[3] = data.get(i).isState();
		            row[4] = data.get(i).isWay();
		            model.addRow(row);
			}
			
		}
	            
	            
			 /*for (RetractableBollard bollard : bollardinfo) {
            Object[] row = new Object[5];
            row[0] = bollard.getId();
            row[1] = bollard.getAddress();
            row[2] = bollard.isActive();
            row[3] = bollard.isState();
            row[4] = bollard.isWay();
            
            model.addRow(row);
            }*/
			
		catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		}
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Crud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Crud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Crud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Crud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
				new Crud().setVisible(true);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBollard;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtisActive;
    private javax.swing.JTextField txtAddress;
    private JTextField txtState;
    private JTextField txtWay;
	private Logger lOGGER;
	private JLabel Jlabel4;
	
}
