
package client;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import common.ConvertJSON;

import common.Request;
import common.Response;
import common.business.RetractableBollard;
import common.business.infotraffic;
import common.*;

import connection.PropertiesFileReader;

import client.Frame3;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JLabel;
import javax.swing.JToggleButton;
import javax.swing.JTextField;
import javax.swing.JTable;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.awt.Color;
import java.awt.SystemColor;

/**
 *
 * @author ANAS
 */
public class Frame3 extends javax.swing.JFrame {

	

	ArrayList<infotraffic> bollardinfo = new ArrayList<>();
	CommunicationWithServer client ;
	PropertiesFileReader serveconfig = new PropertiesFileReader();

	public Frame3(CommunicationWithServer client) throws IOException {
		getContentPane().setBackground(new Color(65, 105, 225));
		this.client= client;
		initComponents();

		
		serveconfig.initServer();

		final int SERVER_PORT = Integer.parseInt(serveconfig.getProperty("serverportClient"));
		final String SERVER_ADDRESS = serveconfig.getProperty("serveraddress");
		 lOGGER = Logger.getLogger(Frame2.class.getName());
		
		fetch(client);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		txtId = new javax.swing.JTextField();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		txtAlert = new javax.swing.JTextField();
		txtNbMax = new javax.swing.JTextField();
		jScrollPane1 = new javax.swing.JScrollPane();
		tblBollard = new javax.swing.JTable();
		btnSave = new javax.swing.JButton();
		btnSave.setFont(new Font("Tahoma", Font.BOLD, 11));
		btnSave.setBackground(new Color(0, 0, 128));
		btnSave.setForeground(new Color(0, 0, 128));
		btnUpdate = new javax.swing.JButton();
		btnUpdate.setForeground(new Color(0, 0, 128));
		btnUpdate.setBackground(new Color(0, 0, 128));
		btnDelete1 = new javax.swing.JButton();
		btnDelete1.setForeground(new Color(0, 0, 128));
		btnDelete1.setBackground(new Color(0, 0, 128));
		jLabel6 = new javax.swing.JLabel();
		jLabel6.setForeground(new Color(128, 0, 0));

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Simulation");
		setResizable(false);

		jLabel1.setFont(new Font("Yu Gothic Medium", Font.BOLD, 13)); // NOI18N
		jLabel1.setText("Id");

		jLabel2.setFont(new Font("Yu Gothic Medium", Font.BOLD, 13)); // NOI18N
		jLabel2.setText("AlertAirQuality");

		jLabel6.setFont(new Font("Yu Gothic Medium", Font.BOLD, 16)); // NOI18N
		jLabel6.setText("Simulation Settings");

		tblBollard.setModel(
				new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"Id", "AlertAirQuality", "NbMaxVehicle"
			}
		) {
			Class[] columnTypes = new Class[] {
				Integer.class, Boolean.class, Integer.class
			};
			public Class getColumnClass(int columnIndex) {
				return columnTypes[columnIndex];
			}
		});
		tblBollard.setCellSelectionEnabled(true);
		tblBollard.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				tblStudentsMouseClicked(evt);
			}
		});
		jScrollPane1.setViewportView(tblBollard);
		if (tblBollard.getColumnModel().getColumnCount() > 0) {
			tblBollard.getColumnModel().getColumn(2).setResizable(false);
		}

		btnSave.setText("Save");
		btnSave.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
		btnSave.setIconTextGap(0);
		btnSave.setInheritsPopupMenu(true);
		btnSave.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				try {
					btnSaveActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				// TODO Auto-generated catch block

			}
		});

		btnUpdate.setText("Update");
		btnUpdate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
		btnUpdate.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					btnUpdateActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		btnDelete1.setText("Delete");
		btnDelete1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
		btnDelete1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					btnDelete1ActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		});

		jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
		jLabel6.setText("Simulation Settings");

		JLabel lblIsactive = new JLabel("NbMax");
		lblIsactive.setFont(new Font("Yu Gothic Medium", Font.BOLD, 13));

		JButton btnRetour = new JButton("Retour");
		btnRetour.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setVisible(false);
				MainClient launchIhm = null;
				try {client.stopConnection();

					launchIhm = new MainClient();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				launchIhm.getFrame().setVisible(true);
				
			
			}
		});
		
		lblIdBollard = new JLabel("id Bollard");
		
		lblWayOfBollard = new JLabel("Way of bollard ");
		
		lblCarId = new JLabel("Car id ");
		
		lblCarLocation = new JLabel("Car location");
		
		textField = new JTextField();
		textField.setColumns(10);
		
		textField_1 = new JTextField();
		textField_1.setColumns(10);
		
		textField_2 = new JTextField();
		textField_2.setColumns(10);
		
		textField_3 = new JTextField();
		textField_3.setColumns(10);
		
		JButton btnNewButton = new JButton("Launch simulation");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap(810, Short.MAX_VALUE)
					.addComponent(btnRetour, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
					.addGap(42))
				.addGroup(layout.createSequentialGroup()
					.addContainerGap(449, Short.MAX_VALUE)
					.addComponent(jLabel6, GroupLayout.PREFERRED_SIZE, 229, GroupLayout.PREFERRED_SIZE)
					.addGap(265))
				.addGroup(layout.createSequentialGroup()
					.addGap(78)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addComponent(lblIsactive)
								.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE))
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
									.addGap(1)
									.addGroup(layout.createParallelGroup(Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
											.addGap(16)
											.addComponent(txtId, 188, 188, 188))
										.addGroup(layout.createSequentialGroup()
											.addGap(17)
											.addComponent(txtAlert, GroupLayout.PREFERRED_SIZE, 188, GroupLayout.PREFERRED_SIZE))))
								.addGroup(layout.createSequentialGroup()
									.addGap(18)
									.addGroup(layout.createParallelGroup(Alignment.LEADING)
										.addComponent(txtNbMax, GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
										.addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
							.addGap(177)
							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
								.addGroup(layout.createSequentialGroup()
									.addGroup(layout.createParallelGroup(Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
											.addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 72, GroupLayout.PREFERRED_SIZE)
											.addGap(59)
											.addComponent(btnUpdate, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
										.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 376, GroupLayout.PREFERRED_SIZE))
									.addGap(60))
								.addGroup(layout.createSequentialGroup()
									.addComponent(btnDelete1, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
									.addGap(93))))
						.addGroup(layout.createSequentialGroup()
							.addComponent(lblIdBollard, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
							.addContainerGap())
						.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addComponent(lblWayOfBollard)
								.addComponent(lblCarId)
								.addComponent(lblCarLocation))
							.addGap(18)
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addComponent(textField_3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(textField_2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(textField_1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
							.addGap(688))))
				.addGroup(layout.createSequentialGroup()
					.addGap(424)
					.addComponent(btnNewButton)
					.addContainerGap(430, Short.MAX_VALUE))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addGap(29)
					.addComponent(jLabel6, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
					.addGap(3)
					.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
						.addGroup(layout.createSequentialGroup()
							.addGap(65)
							.addGroup(layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
								.addComponent(txtId, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)))
						.addGroup(layout.createSequentialGroup()
							.addGap(35)
							.addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE)))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
						.addComponent(txtAlert, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addComponent(lblIsactive)
								.addComponent(txtNbMax, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE))
							.addGap(35)
							.addGroup(layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(lblIdBollard)
								.addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
							.addGap(18)
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
									.addComponent(lblWayOfBollard)
									.addGap(29)
									.addComponent(lblCarId)
									.addGap(30)
									.addGroup(layout.createParallelGroup(Alignment.BASELINE)
										.addComponent(lblCarLocation)
										.addComponent(textField_3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
								.addGroup(layout.createSequentialGroup()
									.addComponent(textField_1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
									.addGap(18)
									.addComponent(textField_2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
							.addGap(125))
						.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(btnDelete1, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
								.addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
								.addComponent(btnUpdate, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
							.addPreferredGap(ComponentPlacement.RELATED, 171, Short.MAX_VALUE)
							.addComponent(btnNewButton)
							.addGap(14)
							.addComponent(btnRetour, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
							.addGap(44))))
		);
		getContentPane().setLayout(layout);

		pack();
		setLocationRelativeTo(null);
	}// </editor-fold>//GEN-END:initComponents

	private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) throws IOException {// GEN-FIRST:event_btnSaveActionPerformed
		// TODO add your handling code here:
		Integer id = Integer.parseInt(txtId.getText()); // txtId.getText().trim();
		Boolean Alert = Boolean.parseBoolean(txtAlert.getText());
		Integer NbMax = Integer.parseInt(txtNbMax.getText());
		

		if (!Alert.toString().isEmpty()
				&& !NbMax.toString(NbMax).isEmpty() && !id.toString(id).isEmpty()) {
			try {
				
				final int SERVER_PORT = Integer.parseInt(serveconfig.getProperty("serverportClient"));
				final String SERVER_ADDRESS = serveconfig.getProperty("serveraddress");

				ConvertJSON converter = new ConvertJSON();

				Request req = new Request();
				infotraffic infotraffic = new infotraffic();
				
				req.setSource("client");
				req.setOperation_type("selectID");
				req.setTarget("infotraffic");
				req.setObj(id.toString());

				
				//client.startConnection(SERVER_ADDRESS, SERVER_PORT);
				
				Response resp = new Response();

				resp = client.sendMessage(req);
				ArrayList<String> info = resp.getValues();

				if (info.isEmpty()) {

					saveUser(id, Alert, NbMax, client);
					DefaultTableModel model = (DefaultTableModel) tblBollard.getModel();
					Object[] row = new Object[3];
					row[0] = id;
					row[1] = Alert;
					row[2] = NbMax;
					
					model.addRow(row);
				} else {
					alert("Please provide a different id number", "Similar id found");
				}

				clear();
				//client.stopConnection();
			} catch (Exception ex) {
				Logger.getLogger(Frame3.class.getName()).log(Level.SEVERE, null, ex);
			} finally {
			}

		} // else if (!id.matches("^[0-9]{8}$")) {
			// alert("please provide a valid id number", "Wrong id");
			// }
		else {
			alert("please fill in all the details");
		}
	}

	// GEN-LAST:event_btnSaveActionPerformed

	private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) throws IOException {// GEN-FIRST:event_btnUpdateActionPerformed
		// TODO add your handling code here:
		Integer id = Integer.parseInt(txtId.getText()); // txtId.getText().trim();
		Boolean Alert = Boolean.parseBoolean(txtAlert.getText());
		Integer NbMax = Integer.parseInt(txtNbMax.getText());

		if (!Alert.toString().isEmpty()
				&& !NbMax.toString(NbMax).isEmpty() && !id.toString(id).isEmpty()) {
			try {
				
				final int SERVER_PORT = Integer.parseInt(serveconfig.getProperty("serverportClient"));
				final String SERVER_ADDRESS = serveconfig.getProperty("serveraddress");

				ConvertJSON converter = new ConvertJSON();

				Request req = new Request();
				infotraffic infotraffic = new infotraffic();
				
				req.setSource("client");
				req.setOperation_type("selectID");
				req.setTarget("infotraffic");
				req.setObj(id.toString());

				//client.startConnection(SERVER_ADDRESS, SERVER_PORT);

				Response resp = new Response();

				resp = client.sendMessage(req);
				ArrayList<String> info = resp.getValues();
				if (!info.isEmpty()) {
					

					update(id, Alert, NbMax, client);

					DefaultTableModel model = (DefaultTableModel) tblBollard.getModel();
					model.setRowCount(0);
					fetch(client);
					//client.stopConnection();
					alert("Update was successful");

				} else {
					alert("There is no such info", "Update error");
					clear();
				}

			} catch (Exception ex) {
				Logger.getLogger(Frame3.class.getName()).log(Level.SEVERE, null, ex);
			}
		} else {
			alert("There is nothing to update :(", "No row selected");
		}
	}// GEN-LAST:event_btnUpdateActionPerformed

	// set the values of a row to the textfields
	private void tblStudentsMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tblStudentsMouseClicked
		// TODO add your handling code here:
		int i = tblBollard.getSelectedRow();
		TableModel model = tblBollard.getModel();
		txtId.setText(model.getValueAt(i, 0).toString());
		txtAlert.setText(model.getValueAt(i, 1).toString());
		txtNbMax.setText(model.getValueAt(i, 2).toString());
		
	}// GEN-LAST:event_tblStudentsMouseClicked

	// handles delete button action
	private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) throws IOException {// GEN-FIRST:event_btnDelete1ActionPerformed
		// TODO add your handling code here:
		int i = tblBollard.getSelectedRow();
		if (i >= 0) {
			int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?",
					"Delete confirmation", JOptionPane.YES_NO_OPTION);
			if (option == 0) {
				TableModel model = tblBollard.getModel();

				String id = model.getValueAt(i, 0).toString();
				if (tblBollard.getSelectedRows().length == 1) {
					
					delete(id,client);
					
					DefaultTableModel model1 = (DefaultTableModel) tblBollard.getModel();
					model1.setRowCount(0);
					fetch(client);
					//client.stopConnection();
					clear();
				}
			}
		} else {
			alert("Please select a row to delete");
		}
	}// GEN-LAST:event_btnDelete1ActionPerformed

	// method to show an info alert
	public void alert(String msg) {
		JOptionPane.showMessageDialog(rootPane, msg);
	}

	// method to show an error alert
	public void alert(String msg, String title) {
		JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
	}

	// method to save user to the db
	public void saveUser(Integer id, Boolean Alert, Integer NbMax,
			CommunicationWithServer client) throws IOException {

		
		infotraffic bollard = new infotraffic();
		Request req = new Request();
		ConvertJSON converter = new ConvertJSON();
		bollard.setId(id);
		bollard.setAlert(Alert);
		bollard.setNbmaxcar(NbMax);
		
		req.setOperation_type("insert");
		req.setTarget("infotraffic");
		req.setSource("");
		req.setObj(converter.infotrafficToJson(bollard));

		//client.startConnection(SERVER_ADDRESS, SERVER_PORT);

		client.sendMessage(req);
		//client.stopConnection();
		System.out.println("ok");
	}

	// update the db
	public void update(Integer id, Boolean Alert,Integer NbMax,
			CommunicationWithServer client) throws IOException {
		try {

			final int SERVER_PORT = Integer.parseInt(serveconfig.getProperty("serverportClient"));
			final String SERVER_ADDRESS = serveconfig.getProperty("serveraddress");
			
			
			ConvertJSON converter = new ConvertJSON();

			infotraffic bollard = new infotraffic();
			Request req1 = new Request();
			ConvertJSON converter1 = new ConvertJSON();
			bollard.setId(id);
			bollard.setAlert(Alert);
			bollard.setNbmaxcar(NbMax);
			req1.setOperation_type("update");
			req1.setTarget("infotraffic");
			req1.setSource("client");
			req1.setObj(converter1.infotrafficToJson(bollard));

			//client.startConnection(SERVER_ADDRESS, SERVER_PORT);

			client.sendMessage(req1);

		} catch (Exception ex) {
			Logger.getLogger(Frame3.class.getName()).log(Level.SEVERE, null, ex);
		}
		fetch(client);
	//	client.stopConnection();
	}

	// delete details in the db
	public void delete(String id ,CommunicationWithServer client) throws IOException {
		try {

			final int SERVER_PORT = Integer.parseInt(serveconfig.getProperty("serverportClient"));
			final String SERVER_ADDRESS = serveconfig.getProperty("serveraddress");
			infotraffic infotraffic= new infotraffic();
			Request req = new Request();
			ConvertJSON converter = new ConvertJSON();

			infotraffic.setId(Integer.parseInt(id));

			req.setOperation_type("delete");
			req.setTarget("infotraffic");
			req.setSource("client");
			req.setObj(converter.infotrafficToJson(infotraffic));

		//	client.startConnection(SERVER_ADDRESS, SERVER_PORT);

			client.sendMessage(req);

		} catch (Exception ex) {
			Logger.getLogger(Frame3.class.getName()).log(Level.SEVERE, null, ex);
		}
		fetch(client);
		//client.stopConnection();

	}

	// method to clear the txt fields
	private void clear() {
		txtId.setText("");
		txtAlert.setText("");
		txtNbMax.setText("");
		
	}

	// fetch
	private void fetch(CommunicationWithServer client) throws IOException {

		PropertiesFileReader serveconfig = new PropertiesFileReader();
		
		serveconfig.initServer();

		

		bollardinfo.clear();
		
		Request req = new Request();

		ConvertJSON converter = new ConvertJSON();
		req.setSource("client");
		req.setOperation_type("select");
		req.setTarget("infotraffic");
		

		//client.startConnection(SERVER_ADDRESS, SERVER_PORT);
		
		Response resp = new Response();
		try {

			resp = client.sendMessage(req);
			
			ArrayList<String> databollard = resp.getValues();
			ArrayList<infotraffic> data = new ArrayList<infotraffic>();

			for (int i = 0; i < databollard.size(); i++) {
				data.add(converter.JsonToinfotraffic(databollard.get(i)));

			}

			

			DefaultTableModel model = (DefaultTableModel) tblBollard.getModel();
			for (int i = 0; i < data.size(); i++) {

				Object[] row = new Object[3];
				row[0] = data.get(i).getId();
				row[1] = data.get(i).getAlert();
				row[2] = data.get(i).getNbmaxcar();
				
				model.addRow(row);
			}

		}

		

		catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Frame3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Frame3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Frame3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Frame3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(() -> {
			try {
				 CommunicationWithServer client = new CommunicationWithServer();
				new Frame3(client).setVisible(true);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnDelete1;
	private javax.swing.JButton btnSave;
	private javax.swing.JButton btnUpdate;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable tblBollard;
	private javax.swing.JTextField txtId;
	private javax.swing.JTextField txtNbMax;
	private javax.swing.JTextField txtAlert;
	private Logger lOGGER;
	private JLabel lblIdBollard;
	private JLabel lblWayOfBollard;
	private JLabel lblCarId;
	private JLabel lblCarLocation;
	private JTextField textField;
	private JTextField textField_1;
	private JTextField textField_2;
	private JTextField textField_3;
}
